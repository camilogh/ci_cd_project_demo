name: Build and Push Docker Images

# Define cuándo se ejecutará este workflow.
on:
  push:
    branches:
      - main # Se activa cada vez que se hace un push a la rama 'main'
  pull_request:
    branches:
      - main # Se activa cuando se abre o actualiza un Pull Request a la rama 'main'

# Permisos necesarios para que el GITHUB_TOKEN pueda escribir en GHCR
permissions:
  contents: read # Permite leer el código del repositorio
  packages: write # ¡Crucial! Permite escribir imágenes en el GitHub Container Registry

jobs:
  build-api-service:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4 # Clona tu repositorio

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push API Service Image
        id: build-api
        uses: docker/build-push-action@v5
        with:
          context: ./api-service # Ruta al Dockerfile (relativa a la raíz del repo)
          push: true # Indica que la imagen debe ser subida
          tags: | # Define las etiquetas para la imagen
            ghcr.io/${{ github.repository }}/api-service:latest
            ghcr.io/${{ github.repository }}/api-service:${{ github.sha }}
          cache-from: type=gha # Usa la caché de GitHub Actions para builds más rápidos
          cache-to: type=gha,mode=max # Guarda la caché para futuras builds

  build-frontend-service:
    runs-on: ubuntu-latest
    needs: build-api-service # Asegura que este job se ejecute DESPUÉS de build-api-service
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Frontend Service Image
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend-service # Ruta al Dockerfile (relativa a la raíz del repo)
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/frontend-service:latest
            ghcr.io/${{ github.repository }}/frontend-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-argocd-manifests:
    runs-on: ubuntu-latest
    # Este job necesita que los jobs de build hayan terminado exitosamente
    needs: [build-api-service, build-frontend-service]
    steps:
      - name: Checkout ArgoCD Manifests Repo
        # Es crucial que uses un token con permisos para clonar y push al repositorio de manifiestos.
        # Si el repositorio de manifiestos es privado y diferente de este, necesitarás un Personal Access Token (PAT)
        # almacenado como un secreto de GitHub (ej. ARGO_MANIFESTS_TOKEN)
        # y configurar 'persist-credentials: false' si usas GITHUB_TOKEN para este repo.
        uses: actions/checkout@v4
        with:
          repository: camilogh/manifiestos_ci_cd_project_demo
          token: ${{ secrets.MANIFESTS_REPO_PAT }}
          ref: main

      - name: Update Image Tags in Helm Values
        # Asumiendo que tus manifiestos usan un Helm Chart con un archivo values.yaml
        # La ruta al archivo values.yaml dentro del repositorio de manifiestos
        # Por ejemplo: charts/my-app/values.yaml
        run: |
          sed -i "s|image: ghcr.io/${{ github.repository }}/api-service:.*|image: ghcr.io/${{ github.repository }}/api-service:${{ github.sha }}|" demo-project-app/values.yaml
          sed -i "s|image: ghcr.io/${{ github.repository }}/frontend-service:.*|image: ghcr.io/${{ github.repository }}/frontend-service:${{ github.sha }}|" demo-project-app/values.yaml

        env:
          GITHUB_SHA: ${{ github.sha }} # Pasar el SHA como variable de entorno si es necesario, aunque aquí se usa directamente.

      - name: Commit and Push Changes
        # Configura el usuario y el correo para el commit
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m " chore(release): update image tags to ${{ github.sha }} [skip ci] " # [skip ci] evita que este commit dispare otro workflow
          git push
