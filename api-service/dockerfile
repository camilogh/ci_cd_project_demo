# Usa una imagen base oficial de Node.js.
# La variante 'alpine' es más ligera y eficiente.
FROM node:20-alpine

# Establece el directorio de trabajo dentro del contenedor.
# Aquí es donde se copiarán y ejecutarán tus archivos de aplicación.
WORKDIR /usr/src/app

# Copia los archivos package.json y package-lock.json.
# Esto se hace primero para aprovechar la caché de Docker.
# Si estos archivos no cambian, Docker no tiene que reinstalar las dependencias en compilaciones futuras.
COPY package*.json ./

# Instala las dependencias del proyecto.
RUN npm install

# Copia el resto del código de la aplicación al directorio de trabajo del contenedor.
COPY . .

# Expone el puerto en el que la aplicación Express estará escuchando.
# Esto es principalmente para documentación e informa a Docker que este puerto será usado.
EXPOSE 3001

# ---- Configuración para Migraciones y Seeds en tiempo de ejecución ----

# Copia knexfile.js y las carpetas de migraciones y seeds
COPY knexfile.js ./
COPY migrations ./migrations
COPY seeds ./seeds

# Crea un script de entrada que manejará la espera de la DB, migraciones y seeds
COPY entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Define las variables de entorno para la conexión a la DB que el entrypoint.sh usará.
# Estos serán placeholders, los valores reales se inyectarán desde Docker Compose o Kubernetes.
ENV DB_HOST=db_host_placeholder \
    DB_USER=user \
    DB_PASSWORD=password \
    DB_NAME=mydatabase \
    DB_PORT=3306

# Script de entrada al iniciar el contenedor.
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD [ "npm", "start" ]